variables:
  NET_VERSION: "9.0.x"
  PathToSolution: "GitTrends.sln"
  PathToGitTrendsCsproj: "GitTrends/GitTrends.csproj"
  PathToUITestsCsproj: "GitTrends.UITests/GitTrends.UITests.csproj"
  PathToUnitTestsCsproj: "GitTrends.UnitTests/GitTrends.UnitTests.csproj"
  PathToAzureFunctionsCsproj: "GitTrends.Functions/GitTrends.Functions.csproj"
  XcodeVersion: "16.2"

trigger:
  branches:
    include:
      - main
  tags:
    include:
      - "*"
  paths:
    exclude:
      - README.md

pr:
  autoCancel: "true"
  branches:
    include:
      - main
  paths:
    exclude:
      - README.md

jobs:
  - job: Build_AzureFunctions
    displayName: Build Azure Functions
    strategy:
      matrix:
        'Windows':
          image: 'windows-latest'
        'macOS':
          image: 'macos-15'
    pool:
      vmImage: $(image)

    steps:
      - task: UseDotNet@2
        displayName: "Install Latest .NET SDK"
        inputs:
          packageType: "sdk"
          version: "$(NET_VERSION)"

      - task: CmdLine@2
        displayName: "Build GitTrends"
        inputs:
          script: "dotnet build $(PathToAzureFunctionsCsproj) -c Release"

  - job: Build_MAUI_App
    displayName: Build .NET MAUI App
    strategy:
      matrix:
        'Windows':
          image: 'windows-latest'
        'macOS':
          image: 'macos-15'
    pool:
      vmImage: $(image)

    steps:
      - script: |
          echo Installed Xcode Versions:
          ls -al  /Applications | grep Xcode
          echo '##vso[task.setvariable variable=MD_APPLE_SDK_ROOT;]'/Applications/Xcode_$(XcodeVersion).app;sudo xcode-select --switch /Applications/Xcode_$(XcodeVersion).app/Contents/Developer
        displayName: 'Set Xcode v$(XcodeVersion)'
        condition: eq(variables['Agent.OS'], 'Darwin') # Only run this step on macOS

      - task: InstallAppleCertificate@2
        displayName: "Set Xcode Signing Certificate"
        condition: eq(variables['Agent.OS'], 'Darwin') # Only run this step on macOS
        inputs:
            certSecureFile: 'Certificate.p12'
            certPwd: '$(APPLECERTIFICATEPASSWORD)'

      - task: InstallAppleProvisioningProfile@1
        displayName: "Set Xcode Provisioning Profile"
        condition: eq(variables['Agent.OS'], 'Darwin') # Only run this step on macOS
        inputs:
          provisioningProfileLocation: 'secureFiles'
          provProfileSecureFile: 'GitTrends_Development_Profile.mobileprovision'

      - task: UseDotNet@2
        displayName: "Install Latest .NET SDK"
        inputs:
          packageType: "sdk"
          version: "$(NET_VERSION)"

      - task: CmdLine@2
        displayName: "Install Latest .NET MAUI Workload"
        inputs:
          script: "dotnet workload install maui"

      - task: JavaToolInstaller@0
        displayName: "Install Java"
        inputs:
          versionSpec: "17"
          jdkArchitectureOption: "x64"
          jdkSourceOption: "PreInstalled"

      - task: CmdLine@2
        displayName: "Build GitTrends"
        inputs:
          script: "dotnet build $(PathToGitTrendsCsproj) -c Release"

  - job: Build_UnitTests
    displayName: Build Unit Tests
    strategy:
      matrix:
        'Windows':
          image: 'windows-latest'
        'macOS':
          image: 'macos-15'
    pool:
      vmImage: $(image)

    steps:
      - script: |
          echo Installed Xcode Versions:
          ls -al  /Applications | grep Xcode
          echo '##vso[task.setvariable variable=MD_APPLE_SDK_ROOT;]'/Applications/Xcode_$(XcodeVersion).app;sudo xcode-select --switch /Applications/Xcode_$(XcodeVersion).app/Contents/Developer
        displayName: 'Set Xcode v$(XcodeVersion)'
        condition: eq(variables['Agent.OS'], 'Darwin') # Only run this step on macOS

      - task: InstallAppleCertificate@2
        displayName: "Set Xcode Signing Certificate"
        condition: eq(variables['Agent.OS'], 'Darwin') # Only run this step on macOS
        inputs:
            certSecureFile: 'Certificate.p12'
            certPwd: '$(APPLECERTIFICATEPASSWORD)'

      - task: InstallAppleProvisioningProfile@1
        displayName: "Set Xcode Provisioning Profile"
        condition: eq(variables['Agent.OS'], 'Darwin') # Only run this step on macOS
        inputs:
          provisioningProfileLocation: 'secureFiles'
          provProfileSecureFile: 'GitTrends_Development_Profile.mobileprovision'

      - task: UseDotNet@2
        displayName: "Install Latest .NET SDK"
        inputs:
          packageType: "sdk"
          version: "$(NET_VERSION)"

      - task: CmdLine@2
        displayName: "Install Latest .NET MAUI Workload"
        inputs:
          script: "dotnet workload install maui"

      - task: CmdLine@2
        displayName: "Build Unit Tests"
        inputs:
          script: "dotnet build $(PathToUnitTestsCsproj)"

  - job: Run_UnitTests
    displayName: Run Unit Tests
    dependsOn: [Build_UnitTests, Build_MAUI_App]
    pool:
      vmImage: macos-15

    steps:
      - script: |
          echo Installed Xcode Versions:
          ls -al  /Applications | grep Xcode
          echo '##vso[task.setvariable variable=MD_APPLE_SDK_ROOT;]'/Applications/Xcode_$(XcodeVersion).app;sudo xcode-select --switch /Applications/Xcode_$(XcodeVersion).app/Contents/Developer
        displayName: 'Set Xcode v$(XcodeVersion)'
        condition: eq(variables['Agent.OS'], 'Darwin') # Only run this step on macOS

      - task: InstallAppleCertificate@2
        displayName: "Set Xcode Signing Certificate"
        condition: eq(variables['Agent.OS'], 'Darwin') # Only run this step on macOS
        inputs:
            certSecureFile: 'Certificate.p12'
            certPwd: '$(APPLECERTIFICATEPASSWORD)'

      - task: InstallAppleProvisioningProfile@1
        displayName: "Set Xcode Provisioning Profile"
        condition: eq(variables['Agent.OS'], 'Darwin') # Only run this step on macOS
        inputs:
          provisioningProfileLocation: 'secureFiles'
          provProfileSecureFile: 'GitTrends_Development_Profile.mobileprovision'
      - task: UseDotNet@2
        displayName: "Install Latest .NET SDK"
        inputs:
          packageType: "sdk"
          version: "$(NET_VERSION)"

      - task: CmdLine@2
        displayName: "Install Latest .NET MAUI Workload"
        inputs:
          script: "dotnet workload install maui"

      - task: CmdLine@2
        displayName: "Inject API Keys"
        inputs:
          script: |
            set -e

            AzureConstantsFile=`find . -name AzureConstants.cs | head -1`
            echo AzureConstantsFile = $AzureConstantsFile

            sed -i '' "s/GetTestTokenApiKey = \"\"/GetTestTokenApiKey = \"$(GETTESTTOKENAPIKEY)\"/g" "$AzureConstantsFile"  
            sed -i '' "s/GetAppCenterApiKeysKey = \"\"/GetAppCenterApiKeysKey = \"$(GETAPPCENTERAPIKEYSKEY)\"/g" "$AzureConstantsFile"
            sed -i '' "s/GetSyncFusionInformationApiKey = \"\"/GetSyncFusionInformationApiKey = \"$(GETSYNCFUSIONINFORMATIONAPIKEY)\"/g" "$AzureConstantsFile"
            sed -i '' "s/GetNotificationHubInformationApiKey = \"\"/GetNotificationHubInformationApiKey = \"$(GETNOTIFICATIONHUBINFORMATIONAPIKEY)\"/g" "$AzureConstantsFile"
            sed -i '' "s/#error Missing API Keys/\/\/#error Missing API Keys/g" "$AzureConstantsFile"

      - task: CmdLine@2
        displayName: "Run Unit Tests"
        env:
          VSTEST_TESTHOST_SHUTDOWN_TIMEOUT: 1100 # Fixes "The active test run was aborted. Reason: Test host process crashed" (source: https://github.com/microsoft/vstest/issues/2952#issuecomment-2234253765)
        inputs:
          script: "dotnet test $(PathToUnitTestsCsproj) -c Release -d detailed"
